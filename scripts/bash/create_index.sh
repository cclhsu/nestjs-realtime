#!/usr/bin/env bash
# ******************************************************************************
# Copyright 2020 Clark Hsu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ******************************************************************************
# How To
# - [Company/Project](<https://{{ GITHUB_PROJECT }}.io/>)
# - [Documentation](<https://{{ GITHUB_PROJECT }}.io/doc>)
# - [Github](<https://github.com/{{ GITHUB_USER }}/{{ GITHUB_PROJECT }}>)
# - [Wikipedia](<https://en.wikipedia.org/wiki/{{ TOPIC }}>)
# ******************************************************************************
# Mark Off this section if use as lib
PROGRAM_NAME=$(basename "${0}")
AUTHOR=clark_hsu
VERSION=0.0.1
# ******************************************************************************
echo -e "\n================================================================================\n"
#echo "Begin: $(basename "${0}")"
#set -e # Exit on error On
#set -x # Trace On
# ******************************************************************************
# Load Configuration

echo -e "\n>>> Load Configuration ...\n"
TOP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${TOP_DIR}/_log.sh"
source "${TOP_DIR}/_common_lib.sh"

PROJECT_DIR=$(dirname $(dirname $(dirname "${0}")))
cd "${PROJECT_DIR}" || exit
PROJECT_DIR="$(pwd)"
log_info "Using current directory: ${PROJECT_DIR}"

# # Load environment variables from _config.sh file
# if [ -f "${TOP_DIR}/_config.sh" ]; then
#     log_info "Loading environment variables from _config.sh file"
#     source "${TOP_DIR}/_config.sh"
# fi

# # Load environment variables from .env file
# if [ -f "${PROJECT_DIR}/.env" ]; then
#     log_info "Loading environment variables from .env file"
#     source "${PROJECT_DIR}/.env"
# fi

# ******************************************************************************
# Parameters

# # Check if the file or directory in the argument exists
# if [ $# -eq 0 ]; then
#     log_error "Usage: ${0} <FILE.ext> or ${0} <DIRECTORY>"
#     exit 1
# fi

# ******************************************************************************
# Functions

function typescript_create_index_for_directory() {
    if [ "$#" != "1" ]; then
        log_error "Usage: ${FUNCNAME[0]} <DIR>"
        log_error "[${FUNCNAME[0]}] [$#] ${*}"
        exit 1
    fi

    log_verbose "[${FUNCNAME[0]}] [$#] ${*}"
    # cd "${TOP_DIR:?}" || exit 1

    local PROJECT_DIR="${1}"
    local SUBDIRECTORIES=$(find "${PROJECT_DIR}" -type d -not -path '*/dist*' -not -path '*/node_modules*')

    for DIR in ${SUBDIRECTORIES}; do
        # Exclude the current directory
        if [[ "${DIR}" != "${PROJECT_DIR}" ]]; then
            INDEX_FILE="${DIR}/index.ts"
            INDEX_FILE_EXISTS=false

            # Check if the index.ts file exists in the directory
            if [ -f "${INDEX_FILE}" ]; then
                INDEX_FILE_EXISTS=true
            fi

            # List TypeScript files in the subdirectory (excluding index.ts, spec.ts, and test.ts) and sort them
            TS_FILES=$(find "${DIR}" -maxdepth 1 -type f \( -name "*.ts" ! -name "index.ts" ! -name "*spec.ts" ! -name "*test.ts" \) | sort)

            # If index.ts exists and there are other .ts files, update the index file
            if [ "${INDEX_FILE_EXISTS}" = true ] && [ ! -z "${TS_FILES}" ]; then
                # Create or overwrite the index file
                echo "// This file is autogenerated by the script." >"${INDEX_FILE}"
                echo "// Do not edit this file directly." >>"${INDEX_FILE}"
                echo "import 'reflect-metadata';" >>"${INDEX_FILE}"

                # Loop through TypeScript files and add imports to the index file
                for FILE_PATH in ${TS_FILES}; do
                    RELATIVE_PATH="${FILE_PATH#"${DIR}"/}"
                    FILE_NAME_WITHOUT_EXT=$(basename "${RELATIVE_PATH}" .ts)
                    echo "export * from './${FILE_NAME_WITHOUT_EXT}';" >>"${INDEX_FILE}"
                done

                log_info "Index file generated for ${DIR} with sorted imports of TypeScript files."
            elif [ "${INDEX_FILE_EXISTS}" = true ]; then
                # Remove the index.ts file if it's the only file in the directory
                rm "${INDEX_FILE}"
                log_info "Removed index file from ${DIR}."
            fi
        fi
    done

    return 0
}

function remove_index_file_from_directories() {
    if [ "$#" != "1" ]; then
        log_error "Usage: ${FUNCNAME[0]} <DIR>"
        log_error "[${FUNCNAME[0]}] [$#] ${*}"
        exit 1
    fi

    log_verbose "[${FUNCNAME[0]}] [$#] ${*}"
    # cd "${TOP_DIR:?}" || exit 1

    local PROJECT_DIR="${1}"
    local SUBDIRECTORIES=$(find "${PROJECT_DIR}" -type d -not -path '*/dist*' -not -path '*/node_modules*')

    for DIR in ${SUBDIRECTORIES}; do
        # Exclude the current directory
        if [[ "${DIR}" != "${PROJECT_DIR}" ]]; then
            INDEX_FILE="${DIR}/index.ts"

            # Check if the index.ts file exists in the directory
            if [ -f "${INDEX_FILE}" ]; then
                # Remove the index.ts file
                rm "${INDEX_FILE}"
                log_info "Removed index file from ${DIR}."
            fi
        fi
    done

    return 0
}

# ******************************************************************************
# Main Program

typescript_create_index_for_directory "${PROJECT_DIR}"

# ******************************************************************************
#set +e # Exit on error Off
#set +x # Trace Off
#echo "End: $(basename "${0}")"
echo -e "\n================================================================================\n"
exit 0
# ******************************************************************************
