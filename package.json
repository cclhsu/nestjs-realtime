{
  "name": "nestjs-realtime",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "prebuild": "rimraf bin build dist out coverage .nyc_output .eslintcache .cache .jest",
    "build": "nest build",
    "format": "prettier --config .prettierrc --write \"src/**/*.{ts,tsx}\" \"test/**/*.{ts,tsx}\"",
    "lint": "eslint \"{src,apps,libs,test}/**/*.{ts,tsx}\" --fix",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/src/main",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json",
    "clean": "rimraf node_modules bin build dist out coverage .nyc_output .eslintcache .cache .jest",
    "start:webhook:server": "RUN_AS=webhook-server-service HTTP_PORT=3001 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3001 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 nest start --watch",
    "start:webhook:client1": "RUN_AS=webhook-client-service HTTP_PORT=3002 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3002 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 CLIENT_HOST=0.0.0.0 CLIENT_PORT=3002 nest start --watch",
    "start:webhook:client2": "RUN_AS=webhook-client-service HTTP_PORT=3003 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3003 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 CLIENT_HOST=0.0.0.0 CLIENT_PORT=3003 nest start --watch",
    "start:webhook:client": "cd client/webhook && http-server -p 3003",
    "start:websocket:server": "RUN_AS=websocket-server-service HTTP_PORT=3001 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3001 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 nest start --watch",
    "start:websocket:client1": "RUN_AS=websocket-client-service HTTP_PORT=3002 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3002 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 CLIENT_HOST=0.0.0.0 CLIENT_PORT=3002 nest start --watch",
    "start:websocket:client2": "RUN_AS=websocket-client-service HTTP_PORT=3003 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3003 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 CLIENT_HOST=0.0.0.0 CLIENT_PORT=3003 nest start --watch",
    "start:websocket:client": "cd client/websocket && http-server -p 3003",
    "start:kafka:producer": "RUN_AS=kafka-producer-service HTTP_PORT=3001 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3001 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 KAFKA_PORT=9092 KAFKA_HOST=kafka nest start --watch",
    "start:kafka:consumer": "RUN_AS=kafka-consumer-service HTTP_PORT=3002 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3002 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 CLIENT_HOST=0.0.0.0 CLIENT_PORT=3002 KAFKA_PORT=9092 KAFKA_HOST=kafka nest start --watch",
    "start:kafka:client": "cd client/kafka && http-server -p 3003",
    "start:redis:producer": "RUN_AS=redis-producer-service HTTP_PORT=3001 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3001 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 REDIS_PORT=6379 REDIS_HOST=redis nest start --watch",
    "start:redis:consumer": "RUN_AS=redis-consumer-service HTTP_PORT=3002 SERVICE_HOST=0.0.0.0 SERVICE_PORT=3002 SERVER_HOST=0.0.0.0 SERVER_PORT=3001 CLIENT_HOST=0.0.0.0 CLIENT_PORT=3002 REDIS_PORT=6379 REDIS_HOST=redis nest start --watch",
    "start:redis:client": "cd client/redis && http-server -p 3003"
  },
  "dependencies": {
    "@nestjs/axios": "^3.0.1",
    "@nestjs/cache-manager": "^2.1.1",
    "@nestjs/common": "^10.2.10",
    "@nestjs/config": "^3.1.1",
    "@nestjs/core": "^10.2.10",
    "@nestjs/jwt": "^10.2.0",
    "@nestjs/microservices": "^10.2.10",
    "@nestjs/passport": "^10.0.2",
    "@nestjs/platform-express": "^10.2.10",
    "@nestjs/platform-socket.io": "^10.2.10",
    "@nestjs/platform-ws": "^10.2.10",
    "@nestjs/swagger": "^7.1.16",
    "@nestjs/terminus": "^10.1.1",
    "@nestjs/websockets": "^10.2.10",
    "@socket.io/redis-adapter": "^8.2.1",
    "axios": "^1.6.2",
    "bcrypt": "^5.1.1",
    "bcryptjs": "^2.4.3",
    "cache-manager": "^5.3.1",
    "cache-manager-redis-store": "^3.0.1",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.0",
    "cors": "^2.8.5",
    "csv-parser": "^3.0.0",
    "csv-writer": "^1.6.0",
    "dotenv": "^16.3.1",
    "fs": "^0.0.1-security",
    "fs-extra": "^11.1.1",
    "glob": "^10.3.10",
    "ioredis": "^5.3.2",
    "js-yaml": "^4.1.0",
    "jsonwebtoken": "^9.0.2",
    "kafkajs": "^2.2.4",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "passport-local": "^1.0.0",
    "redis": "^4.6.11",
    "reflect-metadata": "^0.1.13",
    "rimraf": "^5.0.5",
    "rxjs": "^7.8.1",
    "socket.io": "^4.7.2",
    "socket.io-client": "^4.7.2",
    "swagger-ui-express": "^5.0.0",
    "uuid": "^9.0.1",
    "yaml": "^2.3.4"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.2.1",
    "@nestjs/schematics": "^10.0.3",
    "@nestjs/testing": "^10.2.10",
    "@types/bcrypt": "^5.0.2",
    "@types/cache-manager": "^4.0.6",
    "@types/cache-manager-redis-store": "^2.0.4",
    "@types/express": "^4.17.21",
    "@types/fs-extra": "^11.0.4",
    "@types/glob": "^8.1.0",
    "@types/jest": "^29.5.10",
    "@types/js-yaml": "^4.0.9",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/node": "^20.9.4",
    "@types/passport-jwt": "^3.0.13",
    "@types/passport-local": "^1.0.38",
    "@types/redis": "^4.0.11",
    "@types/supertest": "^2.0.16",
    "@types/uuid": "^9.0.7",
    "@types/ws": "^8.5.10",
    "@typescript-eslint/eslint-plugin": "^6.12.0",
    "@typescript-eslint/parser": "^6.12.0",
    "eslint": "^8.54.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-prettier": "^5.0.1",
    "jest": "^29.7.0",
    "nodemon": "^3.0.1",
    "prettier": "^3.1.0",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.1",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.3.2"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
