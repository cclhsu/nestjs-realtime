' @startuml

' !define class class
' !define ARROW --> : HTTP Request
' !define DIAMOND1 diamond
' !define DIAMOND2 diamond

' class User
' class Service
' class WebhookServer
' class WebhookClient

' User --> Service : Register Webhook
' Service --> WebhookServer : POST /webhooks
' WebhookServer --> Service : 201 Created or Error
' Service --> WebhookServer : POST /webhooks/{ID}/payloads
' WebhookServer --> Service : Deliver Payload
' User --> Service : Disconnect Webhook
' Service --> WebhookServer : DELETE /webhooks/{ID}
' WebhookServer --> Service : 204 No Content or Error

' @enduml


@startuml

package "Webhook Server" as WebhookServer {
    class WebhookServerController {
        + GET /webhooks: string
        + POST /webhooks: string (register: RegistrationDTO)
        + DELETE /webhooks/{ID}: string
        + PUT /webhooks/{ID}: string (update: RegistrationDTO)
        + POST /webhooks/{ID}/subscription: string (subscribe: RegistrationDTO)
        + DELETE /webhooks/{ID}/subscription/{ID}: string (unsubscribe: RegistrationDTO)
        + POST /webhooks/{ID}/payloads: string (send: MessageDTO)
        + POST /webhooks: string (receive: MessageDTO)
    }

    ' class WebhookServerService {
    '     + listRegistrations(): Promise<RegistrationDTO[]>
    '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
    '     + unregister(ID: string): Promise<RegistrationResponseDTO>
    '     + update(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
    '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
    '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
    '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
    '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
    ' }

    ' class WebhookServerRepository {
    '     + listRegistrations(): Promise<RegistrationDTO[]>
    '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
    '     + unregister(ID: string): Promise<RegistrationResponseDTO>
    '     + update(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
    '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
    '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
    '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
    '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
    ' }

    ' class RegistrationDTO {
    '     + uuid: string
    '     + type: string
    '     + stage: string
    '     + environment: string
    '     + sender: string
    '     + timestamp: Date
    '     + callbackURL: string
    '     + subscriptions: string[]
    '     + expires: Date
    '     + secret: string
    '     + state: string
    ' }

    ' class RegistrationResponseDTO {
    '     + success: boolean
    '     + message: string
    '     + data: any
    ' }

    ' class MessageDTO {
    '     + uuid: string
    '     + type: string
    '     + action: string
    '     + stage: string
    '     + environment: string
    '     + sender: string
    '     + recipient: string
    '     + recipients: string[]
    '     + recipientType: string
    '     + timestamp: Date
    '     + data: any
    ' }

    ' class MessageResponseDTO {
    '     + success: boolean
    '     + message: string
    '     + data: MessageDTO
    ' }

    ' WebhookServerController --> WebhookServerService : Register Webhook
    ' WebhookServerService --> WebhookServerRepository : Register Webhook
    ' WebhookServerRepository --> WebhookServerService : 201 Created or Error
    ' WebhookServerService --> WebhookServerController : 201 Created or Error

    ' WebhookServerController --> WebhookServerService : Deliver Payload
    ' WebhookServerService --> WebhookServerRepository : Deliver Payload
    ' WebhookServerRepository --> WebhookServerService : 200 OK or Error
    ' WebhookServerService --> WebhookServerController : 200 OK or Error

    ' WebhookServerController --> WebhookServerService : Disconnect Webhook
    ' WebhookServerService --> WebhookServerRepository : Disconnect Webhook
    ' WebhookServerRepository --> WebhookServerService : 204 No Content or Error
    ' WebhookServerService --> WebhookServerController : 204 No Content or Error
}

package "Webhook Clients" as WebhookClients {
    package "Webhook Client 1" as WebhookClient1 {
        class WebhookClient1Controller {
            + POST /webhook-client/register: string (register: RegistrationDTO)
            + POST /webhook-client/unregister/{ID}: string
            + POST /webhook-client/subscriptions/{ID}: string (subscribe: RegistrationDTO)
            + POST /webhook-client/subscriptions/{ID}/{ID}: string (unsubscribe: RegistrationDTO)
            + POST /webhook-client/send: string (send: MessageDTO)
            + POST /webhook-client/receive: string (receive: MessageDTO)
        }

        ' class WebhookClient1Service {
        '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unregister(ID: string): Promise<RegistrationResponseDTO>
        '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
        '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
        '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
        ' }

        ' class WebhookClient1Repository {
        '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unregister(ID: string): Promise<RegistrationResponseDTO>
        '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
        '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
        '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
        ' }

        ' WebhookClient1Controller --> WebhookClient1Service : Register Webhook
        ' WebhookClient1Service --> WebhookClient1Repository : Register Webhook
        ' WebhookClient1Repository --> WebhookClient1Service : 201 Created or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 201 Created or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Send Payload
        ' WebhookClient1Service --> WebhookClient1Repository : Send Payload
        ' WebhookClient1Repository --> WebhookClient1Service : 200 OK or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 200 OK or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Receive Payload
        ' WebhookClient1Service --> WebhookClient1Repository : Receive Payload
        ' WebhookClient1Repository --> WebhookClient1Service : 200 OK or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 200 OK or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Disconnect Webhook
        ' WebhookClient1Service --> WebhookClient1Repository : Disconnect Webhook
        ' WebhookClient1Repository --> WebhookClient1Service : 204 No Content or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 204 No Content or Error
    }

    package "Webhook Client 2" as WebhookClient2 {
        class WebhookClient2Controller {
            + POST /webhook-client/register: string (register: RegistrationDTO)
            + POST /webhook-client/unregister/{ID}: string
            + POST /webhook-client/subscriptions/{ID}: string (subscribe: RegistrationDTO)
            + POST /webhook-client/subscriptions/{ID}/{ID}: string (unsubscribe: RegistrationDTO)
            + POST /webhook-client/send: string (send: MessageDTO)
            + POST /webhook-client/receive: string (receive: MessageDTO)
        }

        ' class WebhookClient2Service {
        '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unregister(ID: string): Promise<RegistrationResponseDTO>
        '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
        '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
        '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
        ' }

        ' class WebhookClient2Repository {
        '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unregister(ID: string): Promise<RegistrationResponseDTO>
        '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
        '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
        '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
        ' }

        ' WebhookClient1Controller --> WebhookClient1Service : Register Webhook
        ' WebhookClient1Service --> WebhookClient1Repository : Register Webhook
        ' WebhookClient1Repository --> WebhookClient1Service : 201 Created or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 201 Created or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Send Payload
        ' WebhookClient1Service --> WebhookClient1Repository : Send Payload
        ' WebhookClient1Repository --> WebhookClient1Service : 200 OK or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 200 OK or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Receive Payload
        ' WebhookClient1Service --> WebhookClient1Repository : Receive Payload
        ' WebhookClient1Repository --> WebhookClient1Service : 200 OK or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 200 OK or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Disconnect Webhook
        ' WebhookClient1Service --> WebhookClient1Repository : Disconnect Webhook
        ' WebhookClient1Repository --> WebhookClient1Service : 204 No Content or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 204 No Content or Error
    }

    package "Webhook Client 3" as WebhookClient3 {
        class WebhookClient3Controller {
            + POST /webhook-client/register: string (register: RegistrationDTO)
            + POST /webhook-client/unregister/{ID}: string
            + POST /webhook-client/subscriptions/{ID}: string (subscribe: RegistrationDTO)
            + POST /webhook-client/subscriptions/{ID}/{ID}: string (unsubscribe: RegistrationDTO)
            + POST /webhook-client/send: string (send: MessageDTO)
            + POST /webhook-client/receive: string (receive: MessageDTO)
        }

        ' class WebhookClient3Service {
        '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unregister(ID: string): Promise<RegistrationResponseDTO>
        '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
        '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
        '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
        ' }

        ' class WebhookClient3Repository {
        '     + register(request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unregister(ID: string): Promise<RegistrationResponseDTO>
        '     + subscribe(ID: string, request: RegistrationDTO): Promise<RegistrationResponseDTO>
        '     + unsubscribe(WebhookID: string, SubscriptionID: string): Promise<RegistrationResponseDTO>
        '     + send(payload: MessageDTO): Promise<RegistrationResponseDTO>
        '     + receive(payload: MessageDTO): Promise<RegistrationResponseDTO>
        ' }

        ' WebhookClient1Controller --> WebhookClient1Service : Register Webhook
        ' WebhookClient1Service --> WebhookClient1Repository : Register Webhook
        ' WebhookClient1Repository --> WebhookClient1Service : 201 Created or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 201 Created or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Send Payload
        ' WebhookClient1Service --> WebhookClient1Repository : Send Payload
        ' WebhookClient1Repository --> WebhookClient1Service : 200 OK or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 200 OK or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Receive Payload
        ' WebhookClient1Service --> WebhookClient1Repository : Receive Payload
        ' WebhookClient1Repository --> WebhookClient1Service : 200 OK or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 200 OK or Error

        ' WebhookClient1Controller --> WebhookClient1Service : Disconnect Webhook
        ' WebhookClient1Service --> WebhookClient1Repository : Disconnect Webhook
        ' WebhookClient1Repository --> WebhookClient1Service : 204 No Content or Error
        ' WebhookClient1Service --> WebhookClient1Controller : 204 No Content or Error
    }
}

' package "Security" {
'     class Authentication {
'         + authenticateRequest(request: HttpRequest): boolean
'     }
'     class Authorization {
'         + authorizeRequest(request: HttpRequest): boolean
'     }
'     class SecretKeyValidation {
'         + validateSecretKey(payload: WebhookPayload, secretKey: string): boolean
'     }

'     ' Authorization --> Authentication : authenticateRequest()
'     ' SecretKeyValidation --> Authorization : authorizeRequest()
'     ' SecretKeyValidation --> WebhookServer : validateSecretKey()
' }

' package "Monitoring & Logging" {
'     class MonitoringService {
'         + trackWebhookPerformance(ID: ID): PerformanceMetrics
'     }
'     class LoggingService {
'         + logWebhookEvent(eventData: WebhookEvent): void
'     }

'     ' MonitoringService --> WebhookServer : trackWebhookPerformance()
'     ' LoggingService --> WebhookServer : logWebhookEvent()
' }

' package "Event Tracking" {
'     class EventTrackingService {
'         + trackEvent(eventData: WebhookEvent): EventStatus
'     }

'     ' EventTrackingService --> WebhookServer : trackEvent()
' }

WebhookClient1 --> WebhookServer : POST /webhooks
WebhookClient2 --> WebhookServer : POST /webhooks
WebhookClient3 --> WebhookServer : POST /webhooks

WebhookServer --> WebhookClient1 : 201 Created or Error
WebhookServer --> WebhookClient2 : 201 Created or Error
WebhookServer --> WebhookClient3 : 201 Created or Error

WebhookClient1 --> WebhookServer : POST /webhooks/{ID}/payloads
WebhookClient2 --> WebhookServer : POST /webhooks/{ID}/payloads
WebhookClient3 --> WebhookServer : POST /webhooks/{ID}/payloads

WebhookServer --> WebhookClient1 : Deliver Payload
WebhookServer --> WebhookClient2 : Deliver Payload
WebhookServer --> WebhookClient3 : Deliver Payload



' Security.Authentication --> Security.Authorization : Authorize Request
' Security.Authorization --> Security.SecretKeyValidation : Validate Secret Key

' MonitoringService --> WebhookServer : Track Webhook Performance
' LoggingService --> WebhookServer : Log Webhook Event
' EventTrackingService --> WebhookServer : Track Event

@enduml
